## 环形链表
1. 如何判断链表有环
->设置快慢指针
-快指针每次走2步，慢指针每次走1步，如果两个指针相遇，必定有环
>>为什么两个指针在有环的情况下必相遇？
-相对于慢指针，快指针以每次1步的速度在接近它，也就是说，快慢指针之间的距离每次都以1步的速度在缩短，直到两指针相遇
-也就是说相对速度为1，位移是连续的
-假设快指针每次走3步，慢指针每次走1步，这种情况下，相对速度就是2，位移就是间断的，两指针就可能会错过

2.如何找出环的入口
->分析快慢指针相遇时的数量关系
-假设起点到环的入口距离为x，入口到相遇点为y，相遇点到环的入口为z，即环的长度为(y+z)
-当快慢指针相遇时，两个指针的移动的时间相等，通过 路程/速度 = 时间 可以得到：
    慢指针时间：(x+y)/1
    快指针时间：(x+y+n*(y+z))/2 <n是快指针在追上慢指针时移动的圈数，n>=1>
    2(x+y) = x+y+n*(y+z)
    x = (n-1)*(y+z) + z
-如果n=1，可以得到x = z，也就是说"相遇点到环的入口和起点head到环的入口是相等的"
-如果n为其他大于1的数值，同样也可以得到x = z，因为(y+z)是环的长度，在本题中不管跑n圈，最终都会到相遇点，最后得到的结果和n=1是一样的

## 虚拟头结点
1. 什么时候需要设置？
需要对链表的头结点进行操作时，否则如果需要删除head的话，就没有结点指向后面的节点了，链表无法连接了
e.g 206反转链表就不需要虚拟头结点，因为是调整节点的指向，并不涉及删除节点的操作
    24成对交换链表节点就需要设置虚拟头结点，因为原先的头结点别换到其他地方去了，相当于没了，不设置无法返回链表
2. 如何设置？
虚拟头结点就是head的前一个节点，在new的时候，可以设置为 dummy = new ListNode(-1,head)
3. 易错点
-> 在设置了虚拟头结点之后，还需要设置一个移动指针指向dummy，因为dummy是不能动的
-> 对节点的各种操作都需要这个移动指针，dummy本身不动，但是两者指向的是同一个引用，所以dummy指向的内容会根据指针的变化而变化
-> 在最后返回链表时，注意不要返回head了，因为此时的head很有可能被删除了，需要返回的是dummy.next
